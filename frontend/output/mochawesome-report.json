{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-13T09:42:53.894Z",
    "end": "2024-02-13T09:43:22.110Z",
    "duration": 28216,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0585eba2-d339-4219-98c1-d1f8a606e4fa",
      "title": "",
      "fullFile": "H:\\GitHub\\ingsw3-integrador\\frontend\\visuals_test.js",
      "file": "\\visuals_test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
          "title": "Prueba",
          "fullFile": "H:\\GitHub\\ingsw3-integrador\\frontend\\visuals_test.js",
          "file": "\\visuals_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Prueba\"",
              "fullTitle": "Prueba \"before all\" hook: codeceptjs.beforeSuite in \"Prueba\"",
              "timedOut": false,
              "duration": 364,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "594f215d-dd73-47c1-8116-ea795ff959b9",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Prueba\"",
              "fullTitle": "Prueba \"before each\" hook: codeceptjs.before in \"Prueba\"",
              "timedOut": false,
              "duration": 87,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "e1028e38-ec87-4abe-bc92-289d026e8811",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Prueba\"",
              "fullTitle": "Prueba \"after all\" hook: codeceptjs.afterSuite in \"Prueba\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "d29a22c4-e674-41e3-b1d8-f38feefecc08",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Prueba\"",
              "fullTitle": "Prueba \"after each\" hook: finalize codeceptjs in \"Prueba\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "0ab856b8-841a-43a3-87a0-8748eaa25a6e",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Preparando Tests.",
              "fullTitle": "Prueba: Preparando Tests.",
              "timedOut": false,
              "duration": 10032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    I.wait(5);\n    console.log('Estamos listos para los tests');\n    I.wait(5);",
              "err": {},
              "uuid": "47f7b290-bb0c-44e9-9935-b510c53816bc",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Flaky scenario",
              "fullTitle": "Prueba Flaky scenario",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {},
              "uuid": "fe573d20-2940-4d69-97f9-ed0eff6832f2",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Flaky scenario 1",
              "fullTitle": "Prueba Flaky scenario 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {},
              "uuid": "fd0c89a7-250c-41e6-bd58-6a776e486163",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing Upload - Error",
              "fullTitle": "Prueba: Testing Upload - Error",
              "timedOut": false,
              "duration": 4961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    I.amOnPage(DOMAIN_URL);\n    I.click('button.sc-kFCroH');\n    I.waitForVisible('div.sc-guDLey.dwEfBc', 5);\n    \n    I.see('Desea a√±adir un nuevo audio de los viernes?');\n    const enlaceYouTube = 'https://www.not-youtube.com/shorts/TEST-ERROR';\n    I.fillField('input.sc-brSamD.bAiYgC', enlaceYouTube);\n    I.wait(1);\n    const colorAntes = await I.grabAttributeFrom('button.sc-kFCroH.sc-ktwOfi.kDXnIh.lcJajR', 'color');\n    I.click('button.sc-kFCroH.sc-ktwOfi.kDXnIh.lcJajR');\n    I.wait(1);\n    const colorDespues = await I.grabAttributeFrom('button.sc-kFCroH.sc-ktwOfi.QRzSJ.lcJajR', 'color');\n    if (colorAntes === 'default' && colorDespues === 'error') {\n        console.log('El audio no se a√±adio de manera exitosa. Lo cual es correcto para la prueba');\n    } else {\n        assert.fail(`Ocurrio un error inesperado`);\n        //assert.fail(`Ocurrio un error y se pudo a√±adir el audio. Antes:${colorAntes} ---- Desp:${colorDespues}`);\n    }",
              "err": {},
              "uuid": "7d0c64ca-862b-4eed-81f7-6c37388da7b5",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing Upload - Success",
              "fullTitle": "Prueba: Testing Upload - Success",
              "timedOut": false,
              "duration": 4803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    I.amOnPage(DOMAIN_URL);\n    I.click('button.sc-kFCroH');\n    I.waitForVisible('div.sc-guDLey.dwEfBc', 5);\n    \n    I.see('Desea a√±adir un nuevo audio de los viernes?');\n    const enlaceYouTube = 'https://www.youtube.com/shorts/x2vguwCs2nQ';\n    I.fillField('input.sc-brSamD.bAiYgC', enlaceYouTube);\n    I.wait(1);\n    const colorAntes = await I.grabAttributeFrom('button.sc-kFCroH.sc-ktwOfi.kDXnIh.lcJajR', 'color');\n    I.click('button.sc-kFCroH.sc-ktwOfi.kDXnIh.lcJajR');\n    I.wait(1);\n    const colorDespues = await I.grabAttributeFrom('button.sc-kFCroH.sc-ktwOfi.hOikIJ.lcJajR', 'color');\n    if (colorAntes === 'default' && colorDespues === 'success') {\n        console.log('El audio se a√±adio de manera exitosa. Lo cual es correcto para la prueba');\n        assert.ok('Test de Exito correcto');\n    } else {\n        console.log('El audio se a√±adio de manera exitosa. Lo cual es correcto para la prueba');\n    }",
              "err": {},
              "uuid": "5768c53a-ec41-43ee-9c20-cb7660896ddc",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing Some Text",
              "fullTitle": "Prueba: Testing Some Text",
              "timedOut": false,
              "duration": 6682,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    I.amOnPage(DOMAIN_URL);\n    I.wait(5);\n    I.see('EL AUDIO DE LOS VIERNES!')",
              "err": {},
              "uuid": "3de76852-df24-4dab-aa2b-8aebcb58dbff",
              "parentUUID": "1a7e9d93-f6bc-43c9-9300-456da72636ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47f7b290-bb0c-44e9-9935-b510c53816bc",
            "fe573d20-2940-4d69-97f9-ed0eff6832f2",
            "fd0c89a7-250c-41e6-bd58-6a776e486163",
            "7d0c64ca-862b-4eed-81f7-6c37388da7b5",
            "5768c53a-ec41-43ee-9c20-cb7660896ddc",
            "3de76852-df24-4dab-aa2b-8aebcb58dbff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26480,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./output",
        "reportFilename": "mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}